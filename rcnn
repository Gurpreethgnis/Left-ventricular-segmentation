import tensorflow as tf
import numpy as np

def normalization(input):
    with tf.variable_scope('preprocess') as scope:
        mean = tf.constant([60, 60, 60], dtype=tf.float32, shape=[1, 1, 1, 3], name='img_mean')
        norm = tf.constant([255, 255, 255], dtype=tf.float32, shape=[1, 1, 1, 3], name='img_mean')
        output = (input - mean) / norm
        return output

class rcnn:
    def __init__(self, input, memory):
        self.input = input
        self.memory = memory
        self.parameters = {}
        self.build()

    def build(self):
        self.norminput = normalization(self.input)
        # conv1
        self.conv1_1 = self.convlayer('conv1_1', [3, 3, 3, 64], [64], self.norminput)
        self.conv1_2 = self.convlayer('conv1_2', [3, 3, 64, 64], [64], self.conv1_1)  # 256*256
        self.pool1 = tf.nn.max_pool(value=self.conv1_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool1')  # 112 112 64
        # conv2
        self.conv2_1 = self.convlayer('conv2_1', [3, 3, 64, 128], [128], self.pool1)
        self.conv2_2 = self.convlayer('conv2_2', [3, 3, 128, 128], [128], self.conv2_1)  # 128*128
        self.pool2 = tf.nn.max_pool(value=self.conv2_2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool2')  # 56 56 128
        # conv3
        self.conv3_1 = self.convlayer('conv3_1', [3, 3, 128, 256], [256], self.pool2)
        self.conv3_2 = self.convlayer('conv3_2', [3, 3, 256, 256], [256], self.conv3_1)
        self.conv3_3 = self.convlayer('conv3_3', [3, 3, 256, 256], [256], self.conv3_2)  # 56*56
        self.pool3 = tf.nn.max_pool(value=self.conv3_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool3')  # 28 28 256
        # conv4
        self.conv4_1 = self.convlayer('conv4_1', [3, 3, 256, 512], [512], self.pool3)
        self.conv4_2 = self.convlayer('conv4_2', [3, 3, 512, 512], [512], self.conv4_1)
        self.conv4_3 = self.convlayer('conv4_3', [3, 3, 512, 512], [512], self.conv4_2)  # 28*28
        self.pool4 = tf.nn.max_pool(value=self.conv4_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool4')  # 14 14 512
        # conv5
        self.conv5_1 = self.convlayer('conv5_1', [3, 3, 512, 512], [512], self.pool4)
        self.conv5_2 = self.convlayer('conv5_2', [3, 3, 512, 512], [512], self.conv5_1)
        self.conv5_3 = self.convlayer('conv5_3', [3, 3, 512, 512], [512], self.conv5_2)  # 14*14
        self.pool5 = tf.nn.max_pool(value=self.conv5_3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='pool5')  # 7 7 512
        # recurrent layer
        self.h_input = np.concatenate((self.pool5, self.memory), axis=2)            # (7,7,4068)
        self.h_output = self.rnn_convlayer('rnn', [3, 3, 4608, 512], self.h_input)  # (7,7,512)
        # deconv1
        self.unpool1 = tf.image.resize_bilinear(self.h_output, [14, 14])
        self.deconv1_1 = self.deconvlayer('deconv1_1', [3, 3, 512, 512], [512], self.unpool1, [tf.shape(input)[0], 14, 14, 512])
        self.deconv1_2 = self.deconvlayer('deconv1_2', [3, 3, 512, 512], [512], self.deconv1_1, [tf.shape(input)[0], 14, 14, 512])
        self.deconv1_3 = self.deconvlayer('deconv1_3', [3, 3, 512, 512], [512], self.deconv1_2, [tf.shape(input)[0], 14, 14, 512])
        # deconv2
        self.unpool2 = tf.image.resize_bilinear(self.deconv1_3, [28, 28])
        self.deconv2_1 = self.deconvlayer('deconv2_1', [3, 3, 512, 512], [512], self.unpool2, [tf.shape(input)[0], 28, 28, 512])
        self.deconv2_2 = self.deconvlayer('deconv2_2', [3, 3, 512, 512], [512], self.deconv2_1, [tf.shape(input)[0], 28, 28, 512])
        self.deconv2_3 = self.deconvlayer('deconv2_3', [3, 3, 256, 512], [256], self.deconv2_2, [tf.shape(input)[0], 28, 28, 256])
        # deconv3
        self.unpool3 = tf.image.resize_bilinear(self.deconv2_3, [56, 56])
        self.deconv3_1 = self.deconvlayer('deconv3_1', [3, 3, 256, 256], [256], self.unpool3, [tf.shape(input)[0], 56, 56, 256])
        self.deconv3_2 = self.deconvlayer('deconv3_2', [3, 3, 256, 256], [256], self.deconv3_1, [tf.shape(input)[0], 56, 56, 256])
        self.deconv3_3 = self.deconvlayer('deconv3_3', [3, 3, 128, 256], [128], self.deconv3_2, [tf.shape(input)[0], 56, 56, 128])
        # deconv4
        self.unpool4 = tf.image.resize_bilinear(self.deconv3_3, [112, 112])
        self.deconv4_1 = self.deconvlayer('deconv4_1', [3, 3, 128, 128], [128], self.unpool4, [tf.shape(input)[0], 112, 112, 128])
        self.deconv4_2 = self.deconvlayer('deconv4_2', [3, 3, 64, 128], [64], self.deconv4_1, [tf.shape(input)[0], 112, 112, 64])
        # deconv5
        self.unpool5 = tf.image.resize_bilinear(self.deconv4_2, [224, 224])
        self.deconv5_1 = self.deconvlayer('deconv5_1', [3, 3, 64, 64], [64], self.unpool5, [tf.shape(input)[0], 224, 224, 64])
        self.deconv5_2 = self.deconvlayer('deconv5_2', [3, 3, 3, 64], [3], self.deconv5_1, [tf.shape(input)[0], 224, 224, 3])

        self.output = self.deconv5_2

    def convlayer(self, name, kernel, bias, input):
        with tf.variable_scope(name) as scope:
            kernel = tf.Variable(tf.truncated_normal(kernel, dtype=tf.float32, stddev=1e-1), name='weights')
            conv = tf.nn.conv2d(input, kernel, [1, 1, 1, 1], padding='SAME')
            biases = tf.Variable(tf.constant(0.0, shape=bias, dtype=tf.float32), trainable=True, name='biases')
            out = tf.nn.bias_add(conv, biases)
            # self.parameters += [kernel, biases]
            self.parameters[name+'_W']= kernel
            self.parameters[name+'_b']= biases

            output = tf.nn.relu(out)
            # for tensorboard
            tf.summary.histogram(name+'_W', kernel)
            tf.summary.histogram(name+'_b', biases)
            tf.summary.histogram(name+'_relu', output)

            return output

    def rnn_convlayer(self, name, kernel, input):
        with tf.variable_scope(name) as scope:
            kernel = tf.Variable(tf.truncated_normal(kernel, dtype=tf.float32, stddev=1e-1), name='weights')
            conv = tf.nn.conv2d(input, kernel, [1, 1, 1, 1], padding='SAME')
            # self.parameters[name + '_W'] = kernel

            # for tensorboard
            tf.summary.histogram(name + '_W', kernel)

            return conv

    def deconvlayer(self, name, kernel, bias, input, outputshape):
        with tf.variable_scope(name) as scope:
            kernel = tf.Variable(tf.truncated_normal(kernel, dtype=tf.float32, stddev=1e-1), name='weights')
            # tf.nn.conv2d_transpose(value, filter, outputshape, strides, padding)
            conv = tf.nn.conv2d_transpose(input, kernel, outputshape, [1, 1, 1, 1], padding='SAME')
            biases = tf.Variable(tf.constant(0.0, shape=bias, dtype=tf.float32), trainable=True, name='biases')
            out = tf.nn.bias_add(conv, biases)
            # self.parameters += [kernel, biases]

            output = tf.nn.relu(out)
            return output

